package src;

import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.DisplayMode;
import java.awt.Font;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.lowagie.text.Document;
import java.io.BufferedReader;
import java.io.FileInputStream;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;

import javax.swing.text.Highlighter;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.extractor.WordExtractor;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.exceptions.OpenXML4JException;
import org.apache.xmlbeans.XmlException;
import org.xml.sax.SAXException;

@SuppressWarnings("unused")

public class MainUi extends javax.swing.JFrame implements DocumentListener {
	private static final long serialVersionUID = 1L;
	Dictionary dic = new Dictionary();
	private JLabel status;
	final static Color HILIT_COLOR = Color.yellow;
	final static Color ERROR_COLOR = Color.PINK;
	final static String CANCEL_ACTION = "cancel-search";
	final Color entryBg;
	final Highlighter hilit;
	final Highlighter.HighlightPainter painter;
	final Highlighter hilit1;
	final Highlighter.HighlightPainter painter1;
	private int flag=0, flag1=0, flag2=0;
	private static int openExtensionFlag=0;;
	private static int numberOfSentences=0;
	private int valueOfError=0;
	private static int error_flag=0, maxRatio=0;
	private String openPath, savePath;
	public static String text;
	Icon icon = new ImageIcon("progressbar.gif");
	
	static File file;
	String chosenFile;
	public String[] sw = new String[1000];

    public MainUi(int a) throws SAXException, IOException, ParserConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
    	super();
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        initComponents();

        hilit = new DefaultHighlighter();
        painter = new DefaultHighlighter.DefaultHighlightPainter(HILIT_COLOR);
        
        hilit1 = new DefaultHighlighter();
        painter1 = new DefaultHighlighter.DefaultHighlightPainter(HILIT_COLOR);
        
        textarea2.setHighlighter(hilit1);
        textarea3.setHighlighter(hilit);

        entryBg = entryField.getBackground();
        entryField.getDocument().addDocumentListener(this);

        InputMap im = entryField.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap am = entryField.getActionMap();
        im.put(KeyStroke.getKeyStroke("ESCAPE"), CANCEL_ACTION);
        am.put(CANCEL_ACTION, new CancelAction());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * @throws ParserConfigurationException 
     * @throws IOException 
     * @throws SAXException 
     */
	@SuppressWarnings("deprecation")
	private void initComponents() throws SAXException, IOException, ParserConfigurationException {
		
		searchFor = new javax.swing.JLabel();
        entryField = new javax.swing.JTextField();
        autoSummarization = new javax.swing.JLabel();
        stopWords = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        showOpenProgress = new javax.swing.JLabel(icon);
        showOpenProgress.setVisible(false);
        showSummaryProgress = new javax.swing.JLabel(icon);
        showSummaryProgress.setVisible(false);
        
        label = new JLabel();
        compressionRatio = new JLabel("% Summary Needed");
        compressionRatio.setFont(new Font("Courier New", Font.BOLD, 15));
        label.setFont(new Font("Courier New", Font.BOLD, 15));
        jSlider1.hide();
        label.hide();
        compressionRatio.hide();
        jSlider1.addChangeListener(new MyChangeAction());
        
		setTitle("Automatic Summarization");
    	setPreferredSize(getMaximumSize());
    	setExtendedState(MAXIMIZED_BOTH);
    	setVisible(true);
    	
    	getContentPane().setBackground(Color.DARK_GRAY);
    	autoSummarization.setText("AUTOMATIC TEXT SUMMARIZER");
    	autoSummarization.setFont(new Font("Times New Roman", Font.BOLD, 50));
    	autoSummarization.setForeground(Color.white);
    	autoSummarization.setHorizontalAlignment(JLabel.CENTER);
    	autoSummarization.setVerticalAlignment(JLabel.CENTER);
    	
    	
    	
    	searchFor.setText("Search For: ");
    	searchFor.setFont(new Font("Courier New", Font.BOLD, 12));
    	searchFor.setForeground(Color.white);
    	searchFor.hide();
    	entryField.hide();

    	jScrollPane1 = new javax.swing.JScrollPane();
    
      addWordToXml = new javax.swing.JTextField();
        saveWordToXml = new javax.swing.JButton();
        
        jScrollPane2 = new javax.swing.JScrollPane();
        textarea2 = new javax.swing.JTextArea();
        getSummary = new javax.swing.JButton();
        
        jScrollPane3 = new javax.swing.JScrollPane();
        textarea3 = new javax.swing.JTextArea();
        saveSummaryFile = new javax.swing.JButton();
        saveSummaryFile1 = new javax.swing.JButton();
        
        savepptFile = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
         paste = new javax.swing.JMenuItem();
        
        exit = new javax.swing.JMenuItem();
        
        jMenu2 = new javax.swing.JMenu();
        aboutUs = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
        saveWordToXml.setText("Save");
        saveWordToXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                	saveWordToXmlActionPerformed(evt);
				} catch (IOException e) {
					e.printStackTrace();
				} catch (SAXException e) {
					e.printStackTrace();
				} catch (ParserConfigurationException e) {
					e.printStackTrace();
				}
            }
        });
        
        remove = new javax.swing.JButton();
        remove.setText("Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					removeActionPerformed(evt);
				} catch (IOException e) {
					e.printStackTrace();
				} catch (SAXException e) {
					e.printStackTrace();
				} catch (ParserConfigurationException e) {
					e.printStackTrace();
				}
            }
        });
        removeStopword = new javax.swing.JTextField();
        removeStopword.setVisible(false);
        remove.setVisible(false);
        
 
       jScrollPane1.setVisible(false);
      
        Font font2 = new Font("Courier New", Font.PLAIN, 14);
        textarea2.setFont(font2);
        textarea2.setForeground(Color.BLACK);
        textarea2.setEditable(true);
        textarea2.setLineWrap(true);
        textarea2.setWrapStyleWord(true);
        textarea2.setColumns(5);
        textarea2.setRows(20);
        jScrollPane2.setViewportView(textarea2);

        Font font3 = new Font("Courier New", Font.PLAIN, 14);
        textarea3.setFont(font3);
        textarea3.setForeground(Color.RED);
        textarea3.setEditable(false);
        textarea3.setLineWrap(true);
        textarea3.setWrapStyleWord(true);
        textarea3.setColumns(5);
        textarea3.setRows(20);
        jScrollPane3.setViewportView(textarea3);

        getSummary.setText("Get Summary");
        getSummary.setVisible(false);
        getSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					getSummaryActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				} catch (SAXException e) {
					e.printStackTrace();
				} catch (ParserConfigurationException e) {
					e.printStackTrace();
				} catch (BadLocationException e) {
					e.printStackTrace();
				}
            }
        });


        saveSummaryFile.setText("Save Summary File");
       
        saveSummaryFile.setVisible(false);
        saveSummaryFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					saveSummaryFileActionPerformed(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });
         saveSummaryFile1.setText("Save AS PDF");
           
        saveSummaryFile1.setVisible(false);
        saveSummaryFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					saveSummaryFileActionPerformed1(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });
        savepptFile.setText("Save AS PPT");
       setLayout(null);
        savepptFile.setVisible(false);
        savepptFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					savepptFileActionPerformed1(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });

     
        jMenu1.setText("File");
        
        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open.setText("Open");
        paste.setText("Direct Input ");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    try {
                        openActionPerformed(evt);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MainUi.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(MainUi.class.getName()).log(Level.SEVERE, null, ex);
                    }
				} catch (InvalidFormatException e) {
					e.printStackTrace();
				} catch (OpenXML4JException e) {
					e.printStackTrace();
				} catch (XmlException e) {
					e.printStackTrace();
				} catch (SAXException e) {
					e.printStackTrace();
				} catch (ParserConfigurationException e) {
					e.printStackTrace();
				} catch (SQLException e) {
					e.printStackTrace();
				}
            }
        });
        jMenu1.add(open);
         paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					pasteActionPerformed1(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });
           jMenu1.add(paste);
        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");
        
        aboutUs.setText("Team");
        aboutUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					aboutUsActionPerformed(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });
        jMenu2.add(aboutUs);
        
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);

        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            
             .addGroup(layout.createSequentialGroup()
                //.addContainerGap()
                .addComponent(autoSummarization, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
               
             .addGroup(layout.createSequentialGroup()
                //.addContainerGap()
            		 .addGap(750,750,750)
                .addComponent(showSummaryProgress))
             
             .addGroup(layout.createSequentialGroup()
                //.addContainerGap()
            		 .addGap(105,105,105)
                .addComponent(remove))
             
             .addGroup(layout.createSequentialGroup()
                //.addContainerGap()
            		 .addGap(10,10,10)
                .addComponent(removeStopword, 90, 90, 90))
                
             .addGroup(layout.createSequentialGroup()
                //.addContainerGap()
            		 .addGap(320,320,320)
                .addComponent(showOpenProgress))
            
             .addGroup(layout.createSequentialGroup()
                //.addContainerGap()
            		 .addGap(10, 10, 10)
                .addComponent(stopWords, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                
            .addGroup(layout.createSequentialGroup()
                .addGap(600, 600, 600)
                .addComponent(searchFor, 150, 150, 150))
                
            .addGroup(layout.createSequentialGroup()
            		.addGap(690, 690, 690)
            		.addComponent(entryField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
            
            .addGroup(layout.createSequentialGroup()
            		.addGap(10, 10, 10)
            	.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
            	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                
                .addGroup(layout.createSequentialGroup()	
                		.addGap(10, 10, 10)
                //.addComponent(addWordToXml, javax.swing.GroupLayout.PREFERRED_SIZE, 90,  javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               // .addComponent(saveWordToXml)
                .addGap(100)
                .addComponent(getSummary)
                .addGap(240)
                .addComponent(saveSummaryFile)
                .addGap(50)
                .addComponent(saveSummaryFile1)
                .addGap(50)
                .addComponent(savepptFile)
                .addGap(50)
               
                )
                
                .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(compressionRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                
                .addGroup(layout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label)
               
                )
        );
      
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             

            .addGroup(layout.createSequentialGroup()
            	.addGap(660, 660, 660)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchFor)
                    .addComponent(entryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                
            .addGroup(layout.createSequentialGroup()
            		.addGap(30, 30, 30)
            		 .addComponent(autoSummarization, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
            		 .addComponent(stopWords, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                	.addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                	.addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE))
                                   
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                	
                    .addComponent(getSummary)
                    .addComponent(saveSummaryFile)
                    .addComponent(saveSummaryFile1)
                    .addComponent(savepptFile))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  
                    .addGap(40, 40, 40))
                      
             .addGroup(layout.createSequentialGroup()   
            		  .addGap(280, 280, 280)
            		  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            				  .addComponent(showSummaryProgress)
            				  .addComponent(showOpenProgress)
                      ))
             .addGroup(layout.createSequentialGroup()   
            		  .addGap(660, 660, 660)
            		  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            				  .addComponent(compressionRatio)
                      ))
                      
              .addGroup(layout.createSequentialGroup()
            		.addGap(660, 660, 660)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                		.addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                		
                ))
              .addGroup(layout.createSequentialGroup()   
            		  .addGap(660, 660, 660)
            		  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            				  .addComponent(label)
                      ))
              .addGroup(layout.createSequentialGroup()   
            		  .addGap(625, 625, 625)
            		  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            				  .addComponent(remove)
                      ))
                      
               .addGroup(layout.createSequentialGroup()   
            		  .addGap(625, 625, 625)
            		  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            				  .addComponent(removeStopword)
                
                      ))
             
        ); 
       
        
        
    }

    private void saveWordToXmlActionPerformed(java.awt.event.ActionEvent evt) throws IOException, SAXException, ParserConfigurationException 
    {
    	
    	Dictionary.addStopword(addWordToXml.getText().trim().toLowerCase());
    	addWordToXml.setText("");
        removeStopword.setVisible(true);
        remove.setVisible(true);
    }
    
    
    private void removeActionPerformed(java.awt.event.ActionEvent evt) throws IOException, SAXException, ParserConfigurationException 
    {
    	String from = removeStopword.getText().trim().toLowerCase();
    	
        Dictionary.removeUserStopword(from);
        removeStopword.setText("");
    }
    
         
	public void search() {
    hilit.removeAllHighlights();


    String s = entryField.getText().toLowerCase();
    if (s.length() <= 0) {
      return;
    }
    
    String content = textarea3.getText().toLowerCase();
    int firstOffset = -1;
    int lastIndex = 0;
    int wordSize = s.length();
    int endIndex = 0;
    
    while ((lastIndex = content.indexOf(s, lastIndex)) != -1) 
    {
        endIndex = lastIndex + wordSize;
        	try 
        	{
        		hilit.addHighlight(lastIndex, endIndex, painter);
        		entryField.setBackground(entryBg);
        	} 
        	catch (BadLocationException e) 
        	{
        		
        	}
        	if (firstOffset == -1) 
        	{
        		firstOffset = lastIndex;
        	}
        	lastIndex = endIndex;
    }
    }
	
	
	public void search1() {
	    hilit1.removeAllHighlights();

	    String s = entryField.getText().toLowerCase();
	    if (s.length() <= 0) {
	      return;
	    }
	    
	    String content1 = textarea2.getText().toLowerCase();
	    int firstOffset1 = -1;
	    int lastIndex1 = 0;
	    int wordSize1 = s.length();
	    int endIndex1 = 0;
	    
	    while ((lastIndex1 = content1.indexOf(s, lastIndex1)) != -1) 
	    {
	        endIndex1 = lastIndex1 + wordSize1;
	        	try 
	        	{
	        		hilit1.addHighlight(lastIndex1, endIndex1, painter1);
	        		entryField.setBackground(entryBg);
	        	} 
	        	catch (BadLocationException e) 
	        	{
	        		
	        	}
	        	if (firstOffset1 == -1) 
	        	{
	        		firstOffset1 = lastIndex1;
	        	}
	        	lastIndex1 = endIndex1;
	    }
	}
	
	
  

  public void insertUpdate(DocumentEvent ev) {
    search();
    search1();
  }

  public void removeUpdate(DocumentEvent ev) {
    search();
    search1();
  }

  public void changedUpdate(DocumentEvent ev) {
  }

  class CancelAction extends AbstractAction {
   


	public void actionPerformed(ActionEvent ev) {
      hilit.removeAllHighlights();
      entryField.setText("");
      entryField.setBackground(entryBg);
    }
  }

	
	@SuppressWarnings("deprecation")
	private void openActionPerformed(java.awt.event.ActionEvent evt) throws InvalidFormatException, OpenXML4JException, XmlException, SAXException, ParserConfigurationException, SQLException, FileNotFoundException, IOException {

		if(flag==0)
		{
				chooser = new JFileChooser();
		}
		else
		{
			getSummary.setEnabled(false);
			jSlider1.setVisible(false);
        	label.setVisible(false);
        	compressionRatio.setVisible(false);
			jSlider1.hide();
            label.hide();
            compressionRatio.hide();
			chooser = new JFileChooser(openPath);
		}

			FileNameExtensionFilter filter = new FileNameExtensionFilter(
					".doc, .docx,.pdf and .txt files", "doc", "txt", "docx","pdf");
			
			chooser.setAcceptAllFileFilterUsed(false);
			chooser.setFileFilter(filter);
			int returnVal = chooser.showOpenDialog(this);
	        flag=1;
	        openPath = chooser.getCurrentDirectory().getAbsolutePath();
			if (returnVal == JFileChooser.APPROVE_OPTION)
			{
			file = chooser.getSelectedFile();
            chosenFile = chooser.getSelectedFile().getAbsolutePath();
            if(file.exists())
            {
                if(file.getName().endsWith(".pdf"))
                 {
                    
                try{
                    textarea2.setText("");
            	textarea3.setText("");
            	getSummary.setVisible(false);
            	saveSummaryFile.setVisible(false);
                	saveSummaryFile1.setVisible(false);
                savepptFile.setVisible(false);
            	searchFor.setVisible(false);
            	entryField.setVisible(false);
                       callpdf p=new callpdf(file);
                }
                 catch(Exception e) {} 
                   chosenFile = "Converted.txt";
            		openExtensionFlag=1;
            		textarea2.read(new FileReader("Converted.txt"), null);
                        OpenProgress.openProgress=false;
            	OpenProgress task = new OpenProgress(chosenFile);
            	 task.addPropertyChangeListener(
            	     new PropertyChangeListener() {
            	         public void propertyChange(PropertyChangeEvent evt) {
            	        	 if(OpenProgress.openProgress==false)
            	        		 showOpenProgress.setVisible(true);
            	        	 else
            	        		 showOpenProgress.setVisible(false);
            	         }
            	     });

            	 task.execute();
                } 
                
            if((file.getName().endsWith(".txt") || file.getName().endsWith(".doc")||file.getName().endsWith(".docx")))
            {
            try 
            {
            	textarea2.setText("");
            	textarea3.setText("");
            	getSummary.setVisible(false);
            	saveSummaryFile.setVisible(false);
                	saveSummaryFile1.setVisible(false);
                savepptFile.setVisible(false);
            	searchFor.setVisible(false);
            	entryField.setVisible(false);
   
  
            	
               
                if(file.getName().endsWith(".doc")||file.getName().endsWith(".docx"))
            	{
            		PreProcessor pp = new PreProcessor();
            		System.out.println(file.getAbsolutePath());
            		
File file1=null;
WordExtractor extractor = null ;
try {


FileInputStream fis=new FileInputStream(file.getAbsolutePath());
HWPFDocument document=new HWPFDocument(fis);
extractor = new WordExtractor(document);
String [] fileData = extractor.getParagraphText();
for(int i=0;i<fileData.length;i++){
if(fileData[i] != null)
System.out.println(fileData[i]);
file1 = new File("Converted.txt");
FileWriter writer = new FileWriter(file1);
for(int j=0;j<fileData.length;j++){
if(fileData[j] != null)
							writer.write(fileData[j]);
}
							writer.flush();
							writer.close();
}

}
catch(Exception exep){}
            		chosenFile = "Converted.txt";
            		openExtensionFlag=1;
            		textarea2.read(new FileReader("Converted.txt"), null);
         	}
                  /* if(file.getName().endsWith(".pdf"))
                 {
                    
                try{
                       callpdf p=new callpdf(file);
                }
                 catch(Exception e) {} 
                   chosenFile = "Converted.txt";
            		openExtensionFlag=1;
            		textarea2.read(new FileReader("Converted.txt"), null);
                } */
            	else
            	{
            		openExtensionFlag=0;
            		textarea2.read(new FileReader(file.getAbsolutePath()), null);
            	}
            	
            	OpenProgress.openProgress=false;
            	OpenProgress task = new OpenProgress(chosenFile);
            	 task.addPropertyChangeListener(
            	     new PropertyChangeListener() {
            	         public void propertyChange(PropertyChangeEvent evt) {
            	        	 if(OpenProgress.openProgress==false)
            	        		 showOpenProgress.setVisible(true);
            	        	 else
            	        		 showOpenProgress.setVisible(false);
            	         }
            	     });

            	 task.execute();
            } 
            catch (IOException ex) 
            {
                Logger.getLogger(MainUi.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
            /*else
            {
            	JOptionPane.showMessageDialog(null,
					    "Please select .doc or .docx or .txt files.",
					    "Error",
					    JOptionPane.ERROR_MESSAGE);
            	openActionPerformed(evt);
            }*/
            }
            else
			{
				JOptionPane.showMessageDialog(null,
					    "Sorry!! Couldn't find the file specified",
					    "Error",
					    JOptionPane.ERROR_MESSAGE);
            	openActionPerformed(evt);
			}
			}
    }

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    private void getSummaryActionPerformed(java.awt.event.ActionEvent evt) throws SQLException, SAXException, ParserConfigurationException, BadLocationException {
    	textarea3.setText("");
    	saveSummaryFile.setVisible(false);
        searchFor.setVisible(false);
        entryField.setVisible(false);
        if(error_flag==0)
        {
        	if(maxRatio==1)
        	{
        		int reply = JOptionPane.showConfirmDialog (null,"Compression Ratio is too high.\nDo you want to Continue?",
						"High Compression Ratio",JOptionPane.YES_NO_OPTION,
						JOptionPane.QUESTION_MESSAGE);
            	if (reply == JOptionPane.NO_OPTION || reply == JOptionPane.CLOSED_OPTION)
            	{
            		return;
            	}
        	}
        	int reply1 = JOptionPane.showConfirmDialog (null,"Do you wish to get summary based on a keyword?",
					"Keyword Summary",JOptionPane.YES_NO_OPTION,
					JOptionPane.QUESTION_MESSAGE);
        	if (reply1 == JOptionPane.YES_OPTION)
			{
        		JFrame frame = new JFrame();
        	    String message = "Enter the keyword ";
        	    text = JOptionPane.showInputDialog(frame, message,"Input",JOptionPane.PLAIN_MESSAGE);
			}
        	else if(reply1 == JOptionPane.CLOSED_OPTION)
        	{
        		return;
        	}
        	else
        	{
        		text = null;
        	}
        	SummaryProgress.stopProgress=false;
        	SummaryProgress task = new SummaryProgress(chosenFile);
        	 task.addPropertyChangeListener(
        	     new PropertyChangeListener() {
        	         public void propertyChange(PropertyChangeEvent evt) {
        	        	 if(SummaryProgress.stopProgress==false)
        	        		 showSummaryProgress.setVisible(true);
        	        	 else
        	        		 showSummaryProgress.setVisible(false);
        	         }
        	     });

        	 task.execute();	
        	}
        else
        {
        	error_compression(valueOfError, numberOfSentences);
        }

    }

    private void saveSummaryFileActionPerformed(java.awt.event.ActionEvent evt) throws IOException 
    {

			if(flag1==0)
			{
    		chooserSummary = new JFileChooser();
			}
			else
			{
				chooserSummary = new JFileChooser(savePath);
			}
			FileNameExtensionFilter filter1 = new FileNameExtensionFilter(
					".doc, .docx and .txt files", "doc", "txt","docx");

			chooserSummary.setAcceptAllFileFilterUsed(false);
			chooserSummary.setFileFilter(filter1);
			int option = chooserSummary.showSaveDialog(this);
			flag1=1;
			savePath = chooserSummary.getCurrentDirectory().getAbsolutePath();
			if(option == JFileChooser.APPROVE_OPTION)
			{
				if(chooserSummary.getSelectedFile()!=null)
				{
					File file1 = chooserSummary.getSelectedFile();
					if(file1.exists())
					{
						int reply = JOptionPane.showConfirmDialog (null,"Overwrite existing file?",
								"Confirm Overwrite",JOptionPane.YES_NO_OPTION,
								JOptionPane.QUESTION_MESSAGE);
						
						if (reply == JOptionPane.YES_OPTION)
						{
							if((file1.getName().endsWith(".txt") || file1.getName().endsWith(".doc")||file1.getName().endsWith(".docx")))
							{
							FileWriter writer = new FileWriter(file1);
							writer.write(textarea3.getText());
							writer.flush();
							writer.close();
							JOptionPane.showMessageDialog(null,
								    "File Successfully Saved.",
								    "File Saved",
								    JOptionPane.INFORMATION_MESSAGE);
							}
							else
							{
								StringBuffer sb = new StringBuffer();
								String path = file1.getAbsolutePath();
								sb.append(path);
								sb.append(".txt");
								
								System.out.println(sb);
								File f = new File(sb.toString());
								FileWriter writer = new FileWriter(f);
								writer.write(textarea3.getText());
								writer.flush();
								writer.close();
								JOptionPane.showMessageDialog(null,
									    "File Successfully Saved.",
									    "File Saved",
									    JOptionPane.INFORMATION_MESSAGE);
							}
						}
						else
						{
							saveSummaryFileActionPerformed(evt);
						}
					}
					else
					{
						if((file1.getName().endsWith(".txt") || file1.getName().endsWith(".doc")||file1.getName().endsWith(".dox")))
						{
						FileWriter writer = new FileWriter(file1);
						writer.write(textarea3.getText());
						writer.flush();
						writer.close();
						JOptionPane.showMessageDialog(null,
							    "File Successfully Saved.",
							    "File Saved",
							    JOptionPane.INFORMATION_MESSAGE);
						}
						else
						{
                                                    
							
                                                    
							JOptionPane.showMessageDialog(null,
								    "Please Select Proper  File Extension" ,
								    "File Not Saved",
								    JOptionPane.INFORMATION_MESSAGE);
                                                           saveSummaryFileActionPerformed(evt);
						}
					}
				}
			}
    }
    private void saveSummaryFileActionPerformed1(java.awt.event.ActionEvent evt) throws IOException 
    {
        
if(flag1==0)
			{
    		chooserSummary = new JFileChooser();
			}
			else
			{
				chooserSummary = new JFileChooser(savePath);
			}
			FileNameExtensionFilter filter1 = new FileNameExtensionFilter(
					".pdf","pdf");

			chooserSummary.setAcceptAllFileFilterUsed(false);
			chooserSummary.setFileFilter(filter1);
			int option = chooserSummary.showSaveDialog(this);
			flag1=1;
			savePath = chooserSummary.getCurrentDirectory().getAbsolutePath();
			if(option == JFileChooser.APPROVE_OPTION)
			{
				if(chooserSummary.getSelectedFile()!=null)
				{
					File file1 = chooserSummary.getSelectedFile();
					if(file1.exists())
					{
						int reply = JOptionPane.showConfirmDialog (null,"Overwrite existing file?",
								"Confirm Overwrite",JOptionPane.YES_NO_OPTION,
								JOptionPane.QUESTION_MESSAGE);
						
						if (reply == JOptionPane.YES_OPTION)
						{
							if((file1.getName().endsWith("pdf")))
							{
							
                                                             try{                                          
            OutputStream file = new FileOutputStream(new File(file1.toString()));
 
            Document document = new Document();
            PdfWriter.getInstance(document, file);
 
            document.open();
            document.add(new Paragraph(textarea3.getText()));
            document.add(new Paragraph(new Date().toString()));
 
            document.close();
            file.close();
          }
          catch(Exception e)
          {
          }
							JOptionPane.showMessageDialog(null,
								    "File Successfully Saved.",
								    "File Saved",
								    JOptionPane.INFORMATION_MESSAGE);
							}
							else
							{
								StringBuffer sb = new StringBuffer();
								String path = file1.getAbsolutePath();
								sb.append(path);
								//sb.append("");
								
								System.out.println(sb);
								File f = new File(sb.toString());
								
                                                                 try{                                          
            OutputStream file = new FileOutputStream(new File(sb.toString()));
 
            Document document = new Document();
            PdfWriter.getInstance(document, file);
 
            document.open();
            document.add(new Paragraph(textarea3.getText()));
             document.add(new Paragraph("\n\n"));
            document.add(new Paragraph(new Date().toString()));
 
            document.close();
            file.close();
          }
          catch(Exception e)
          {
          }
								JOptionPane.showMessageDialog(null,
									    "File Successfully Saved.",
									    "File Saved",
									    JOptionPane.INFORMATION_MESSAGE);
							}
						}
						else
						{
							saveSummaryFileActionPerformed1(evt);
						}
					}
					else
					{
						
							StringBuffer sb = new StringBuffer();
							String path = file1.getAbsolutePath();
							sb.append(path);
							sb.append(".pdf");
							
							System.out.println(sb);
							
                                                        try{                                          
            OutputStream file = new FileOutputStream(new File(sb.toString()));
 
            Document document = new Document();
            PdfWriter.getInstance(document, file);
 
            document.open();
            document.add(new Paragraph(textarea3.getText()));
             document.add(new Paragraph("\n\n"));
            document.add(new Paragraph(new Date().toString()));
 
            document.close();
            file.close();
          }
          catch(Exception e)
          {
          }
							JOptionPane.showMessageDialog(null,
								    "File Successfully Saved.",
								    "File Saved",
								    JOptionPane.INFORMATION_MESSAGE);

						}
					}
				}
    	
    }
     private void savepptFileActionPerformed1(java.awt.event.ActionEvent evt) throws IOException 
    {
       
      String s=textarea3.getText();
         
           
        main ma=new main(s);
        ma.setVisible(true);
        
        
             
    }
    
     private void pasteActionPerformed1(java.awt.event.ActionEvent evt) throws IOException 
    {
        textarea2.show();
    	jSlider1.setVisible(true);
    	label.setVisible(true);
    	compressionRatio.setVisible(true);
    	jSlider1.show();
    	label.show();
    	compressionRatio.show();
        
        getSummary.setEnabled(true);
        getSummary.setVisible(true);
        entryField.setText("");	 
        String text=textarea2.getText();
        File file3=new File("Converted.txt");
        FileWriter writer = new FileWriter(file3);
							writer.write(textarea2.getText());
							writer.flush();
							writer.close();
                                                        textarea2.read(new FileReader("Converted.txt"), null);
                                                        OpenProgress.openProgress=false;
                                                        String  chosenFile="Converted.txt";
                                                        
            	OpenProgress task = new OpenProgress(chosenFile);
            	 task.addPropertyChangeListener(
            	     new PropertyChangeListener() {
            	         public void propertyChange(PropertyChangeEvent evt) {
            	        	 if(OpenProgress.openProgress==false)
            	        		 showOpenProgress.setVisible(true);
            	        	 else
            	        		 showOpenProgress.setVisible(false);
            	         }
            	     });

            	 task.execute();
                 textarea2.read(new FileReader("paste.txt"), null);
                 textarea2.setText(text);
    }
    private void aboutUsActionPerformed(java.awt.event.ActionEvent evt) throws IOException 
    {
    	System.out.println("AboutUsActionPerformed");
    	java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new team().setVisible(true);
            }
        });
    }
    
    public class MyChangeAction implements ChangeListener{
        public void stateChanged(ChangeEvent ce){
          int value = jSlider1.getValue();
          float compression_ratio = (float) value/100;
        
          if(numberOfSentences <= 150 && compression_ratio<0.1)
          {
        	  jSlider1.setBackground(Color.RED);
        	  compressionRatio.setForeground(Color.RED);
              label.setForeground(Color.RED);
              error_flag=1;
              valueOfError=45;
          }
          else if(numberOfSentences > 150 && numberOfSentences < 350 && compression_ratio<0.05)
          {
				jSlider1.setBackground(Color.RED);
				compressionRatio.setForeground(Color.RED);
		        label.setForeground(Color.RED);
		        error_flag=1;
		        valueOfError=20;
          }
          else if(numberOfSentences >= 350 && compression_ratio<0.03)
          {
				jSlider1.setBackground(Color.RED);
				compressionRatio.setForeground(Color.RED);
		        label.setForeground(Color.RED);
		        error_flag=1;
		        valueOfError=10;
          }
          else if(compression_ratio>0.90)
          {
        	  jSlider1.setBackground(Color.orange);
        	  compressionRatio.setForeground(Color.orange);
        	  label.setForeground(Color.orange);
        	  error_flag=0;
        	  maxRatio=1;
          }
          else
          {
        	  	error_flag=0;
            	maxRatio=0;
				jSlider1.setBackground(Color.GREEN);
				compressionRatio.setForeground(Color.GREEN);
		        label.setForeground(Color.GREEN);
          }
          
          String str = Integer.toString(value);
          label.setText(str+"%");
          textarea3.setText("");
          saveSummaryFile.setVisible(false);
      	  entryField.setVisible(false);
      	  searchFor.setVisible(false);
          getSummary.setEnabled(true);
        }
      }
    
    public static int getSliderValue()
    {
    	return jSlider1.getValue();
    }
    
    public void error_compression(int a, int b)
    {
    	JOptionPane.showMessageDialog(null,
			    "No. of sentences: "+b+"\nCompression ratio less than 30 % for the given document is too less.",
			    "Error with Compression Ratio",
			    JOptionPane.INFORMATION_MESSAGE);
    }
    
    @SuppressWarnings("deprecation")
	public static void afterFileOpen() throws FileNotFoundException, IOException
    {
    	if(openExtensionFlag==0)
    		textarea2.read(new FileReader(file.getAbsolutePath()), null);
    	else
    		textarea2.read(new FileReader("Converted.txt"), null);
    		
    	numberOfSentences= MainApp.numberOfSentences;
    	System.out.println("Number of sentences **** "+numberOfSentences);
    	if(numberOfSentences<=150)
    		jSlider1.setValue(45);
    	else if(numberOfSentences > 150 && numberOfSentences < 350)
    		jSlider1.setValue(20);
    	else if(numberOfSentences >=350)
    		jSlider1.setValue(10);
    	
    	textarea2.show();
    	jSlider1.setVisible(true);
    	label.setVisible(true);
    	compressionRatio.setVisible(true);
    	jSlider1.show();
    	label.show();
    	compressionRatio.show();
        
        getSummary.setEnabled(true);
        getSummary.setVisible(true);
        entryField.setText("");	 
    }
    
    @SuppressWarnings("deprecation")
	public static void afterMainApp() throws FileNotFoundException, IOException
    {

    	if(maxRatio==1)
    	{
    	jSlider1.setBackground(Color.orange);
    	compressionRatio.setForeground(Color.orange);
        label.setForeground(Color.orange);
    	}
    	else
    	{
    		jSlider1.setBackground(Color.GREEN);
        	compressionRatio.setForeground(Color.GREEN);
            label.setForeground(Color.GREEN);
    	}
      
        textarea3.read(new FileReader("summary.txt"), null);
       
        textarea3.show();   
        saveSummaryFile.setVisible(true);
        saveSummaryFile1.setVisible(true);
        savepptFile.setVisible(true);
       
       savepptFile.setBounds(WIDTH, WIDTH, WIDTH, WIDTH);
       savepptFile.setLocation( 750, 200 ) ;
        searchFor.setVisible(true);
        entryField.setVisible(true);
        
    }

    // Variables declaration - do not modify
    private javax.swing.JMenuItem exit;
    private javax.swing.JButton saveWordToXml;
    private static javax.swing.JButton getSummary;
    public static javax.swing.JButton pdf;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem aboutUs;
    public static javax.swing.JButton saveSummaryFile;
     public static javax.swing.JButton saveSummaryFile1;
   public static javax.swing.JButton savepptFile;

    private static javax.swing.JTextArea textarea2;
    public static javax.swing.JTextArea textarea3;
    private javax.swing.JTextField addWordToXml;
    public static javax.swing.JTextField entryField;
    public static javax.swing.JLabel searchFor;
    private javax.swing.JLabel autoSummarization;
    private javax.swing.JLabel stopWords;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JFileChooser chooserSummary;
    
    private static javax.swing.JSlider jSlider1;
    private static javax.swing.JLabel label;
    private static javax.swing.JLabel compressionRatio;
    
    private javax.swing.JLabel showOpenProgress;
    private javax.swing.JLabel showSummaryProgress;
    
    private javax.swing.JButton remove;
    private javax.swing.JTextField removeStopword;
    // End of variables declaration

}
